        - """
        -     shortestpath(distancemap, startpoint, sourcepoint, stepsize)
        - 
        -     This function traces the shortest path from `startpoint` to
        -     `sourcepoint` using Runge Kutta 4 in a 2D `distancemap`.
        - 
        -     Optionally specify the line tracing `stepsize`.
        - 
        -     Returns a 2D-array with the shortest path.
        - """
        - function shortestpath(distancemap::AbstractArray{T},startpoint::AbstractArray{T},sourcepoint=ones(T,2,1),stepsize::T=T(0.5)) where T
        -     
        -     distancetoend = T(Inf)
    15264     gradientvolume = zeros(T,size(distancemap,1),size(distancemap,2),2)
      960     (Fx,Fy) = pointmin(distancemap)
        0     @views gradientvolume[:,:,1]=-Fx
        0     @views gradientvolume[:,:,2]=-Fy
        -     
        -     i=0
        -     # Reserve a block of memory for the shortest line array
        0     ifree=size(distancemap,1) * 2
     5760     ShortestLine=zeros(T,ifree,ndims(distancemap))
        - 
        -     # Iteratively trace the shortest line
        -     Movement = T(1)
        0     while true
        0         EndPoint = rk4(startpoint, gradientvolume, stepsize)
        - 
        -         # Calculate the distance to the end point
        0         if !isempty(sourcepoint) && !isnan(sourcepoint[1])
   121440             (distancetoend,ind)=findmin(sqrt.(sum((sourcepoint.-repeat(EndPoint,1,size(sourcepoint,2))).^2)))
        -         else
        0             distancetoend = Inf
        -         end
        - 
        -         # Calculate the movement between current point and point 10 iterations back
        0         if i > 10
    54864             Movement = sqrt(sum((EndPoint[:]-ShortestLine[i-10,:]).^2))
        -         end
        - 
        -         # Stop if out of boundary, distance to end smaller then a pixel or
        -         # if we have not moved for 10 iterations
        0         if (EndPoint[1] == 0) || (Movement < stepsize)
        -             break
        -         end
        - 
        -         # Count the number of iterations
        0         i = i + 1
        - 
        -         # Add a new block of memory if nearly full
        0         if i > (ifree - 2)
        0             ifree = ifree * 2
    20400             ShortestLine = vcat(ShortestLine,zeros(T,ifree, ndims(distancemap))) 
        -         end
        - 
        -         # Add current point to the shortest line array
        0         ShortestLine[i,:]=EndPoint
        - 
        0         if distancetoend<stepsize
        0             i=i+1
        -             # Add (Last) Source point to the shortest line array
        0             ShortestLine[i,:] = sourcepoint
        -             break
        -         end
        - 
        -         # Current point is next Starting Point
        -         startpoint=EndPoint
        -     end
        - 
        0     if (distancetoend>1)&&(~isempty(sourcepoint))
   145264         @warn "The shortest path trace did not finish at the source point"
        -     end
        - 
        -     # Remove unused memory from array
        0     ShortestLine=ShortestLine[1:i,:]
        0     return ShortestLine
        - end
